// Written by Naoki Shibata shibatch.sf.net@gmail.com 
// http://ito-lab.naist.jp/~n-sibata/

// This file is part of BAUM software library. BAUM library is in
// public domain. You can use and modify this code for any purpose
// without any obligation.


const char *baum_cl =
  "#define NANGLE 64\n"
  "#define NSEGMENT 512\n"
  "#define SEGLEN 2\n"
  "#define THREEDGE0 4 // 4\n"
  "#define CNTTHRE 10  // 14 -> 10\n"
  "#define OS 2\n"
  "#define DETECTSIZE 4096\n"
  "\n"
  "#ifndef M_PI\n"
  "#define M_PI 3.14159265358979323846f\n"
  "#endif\n"
  "\n"
  "//\n"
  "\n"
  "__constant unsigned short codeMap[] = {\n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d2, 0x0aa, 0x0d5, 0x1a1, 0x0fb, 0x001, 0x1d2, 0x0aa, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f7, 0x000, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1e5, 0x1b6, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0e6, 0x038, 0x1f5, 0x0ab, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1f2, 0x026, 0x1c7, 0x175, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1cc, 0x0a5, 0x0d3, 0x1eb, 0x1eb, 0x1f3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d6, 0x03a, 0x1ed, 0x0af, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0e8, 0x005, 0x1f4, 0x0b0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f9, 0x100, 0x0ca, 0x002, 0x1d3, 0x0ac, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d0, 0x071, 0x0e3, 0x1e1, 0x1fa, 0x0b1, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1df, 0x0ae, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0da, 0x004, 0x1c9, 0x0ad, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d5, 0x003, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0da, 0x010, 0x1dd, 0x115, 0x0ef, 0x163, 0x0da, 0x010, 0x17b, 0x061, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x12a, 0x0b2, 0x0bd, 0x00a, 0x1a8, 0x0b2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x176, 0x052, 0x0a9, 0x009, 0x131, 0x05b, 0x1ea, 0x0b5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d9, 0x199, 0x163, 0x1df, 0x0f4, 0x012, 0x178, 0x062, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x132, 0x005, 0x10d, 0x10f, 0x09f, 0x008, 0x0f3, 0x014, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x166, 0x0cb, 0x11e, 0x0df, 0x135, 0x1a6, 0x1ed, 0x1ad, 0x085, 0x006, 0x153, 0x05f, 0x1ca, 0x0b4, 0xfff, 0xfff, \n"
  "  0x1d1, 0x0ee, 0x0cd, 0x129, 0x1a3, 0x149, 0x0d6, 0x011, 0x117, 0x05a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1a4, 0x098, 0x0b2, 0x0c0, 0x149, 0x197, 0x088, 0x007, 0x0e1, 0x013, 0x102, 0x059, 0x154, 0x060, 0xfff, 0xfff, \n"
  "  0x0bb, 0x141, 0x11f, 0x16d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x19a, 0x0b4, 0x0ce, 0x0d4, 0x139, 0x185, 0x18d, 0x1a9, 0x0b6, 0x00e, 0x0d3, 0x015, 0x114, 0x05c, 0x14b, 0x063, \n"
  "  0x112, 0x01e, 0x1c9, 0x0f2, 0x195, 0x121, 0x0a7, 0x171, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x08b, 0x1ee, 0x0b1, 0x00f, 0x120, 0x05e, 0x14c, 0x064, 0x151, 0x065, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d2, 0x004, 0x08a, 0x00b, 0x127, 0x159, 0x08a, 0x00b, 0x0c7, 0x016, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x158, 0x066, 0x0ac, 0x08d, 0x0dd, 0x1b4, 0x158, 0x066, 0x1c4, 0x0b6, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x146, 0x04e, 0x093, 0x00c, 0x10b, 0x05d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c2, 0x0b9, 0x105, 0x1b8, 0x094, 0x00d, 0x1a9, 0x0b3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0b6, 0x017, 0x13f, 0x068, 0x1de, 0x0ba, 0x1f3, 0x0bb, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1ec, 0x088, 0x175, 0x1a2, 0x1ab, 0x1d2, 0x15b, 0x06f, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1e6, 0x04a, 0x0d1, 0x0e8, 0x0eb, 0x020, 0x125, 0x067, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x150, 0x06e, 0x13a, 0x069, 0x150, 0x06e, 0x1b1, 0x0b7, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c5, 0x101, 0x1a7, 0x156, 0x0db, 0x01f, 0x152, 0x071, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x128, 0x05e, 0x136, 0x0d2, 0x0c8, 0x01e, 0x14d, 0x070, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x122, 0x01b, 0x1a9, 0x0f7, 0x0b3, 0x14c, 0x171, 0x072, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0b4, 0x09f, 0x14a, 0x0c3, 0x1c1, 0x18d, 0x0e2, 0x021, 0x0ed, 0x022, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ff, 0x027, 0x113, 0x06b, 0x14f, 0x073, 0x1ea, 0x0c0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x188, 0x059, 0x196, 0x0cc, 0x1bd, 0x1b0, 0x0d9, 0x024, 0x0f2, 0x026, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1b2, 0x021, 0x156, 0x051, 0x139, 0x0fe, 0x0ad, 0x01c, 0x18b, 0x0b8, 0x1e1, 0x0bf, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x168, 0x078, 0x134, 0x09b, 0x173, 0x1e9, 0x093, 0x018, 0x0a0, 0x01b, 0x0cc, 0x023, 0x10d, 0x06a, 0x1d5, 0x0bc, \n"
  "  0x09d, 0x01a, 0x12e, 0x06d, 0x155, 0x076, 0x19a, 0x0b9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1a4, 0x081, 0x1dc, 0x093, 0x10b, 0x1d6, 0x0a9, 0x01d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x082, 0x019, 0x191, 0x0ef, 0x082, 0x019, 0x143, 0x074, 0x1cd, 0x0bd, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d2, 0x0be, 0x1aa, 0x0c6, 0x0cb, 0x025, 0x121, 0x06c, 0x144, 0x075, 0x1d2, 0x0be, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x16e, 0x042, 0x0d7, 0x15c, 0x1ad, 0x0c2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x178, 0x062, 0x1b4, 0x086, 0x0ba, 0x0b5, 0x0e9, 0x181, 0x133, 0x1ca, 0x0dc, 0x02f, 0x156, 0x07a, 0xfff, 0xfff, \n"
  "  0x169, 0x0f3, 0x0b5, 0x122, 0x153, 0x07b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1e0, 0x069, 0x1da, 0x0c7, 0x0a3, 0x1de, 0x1da, 0x0c7, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x092, 0x002, 0x1c6, 0x034, 0x165, 0x105, 0x195, 0x10c, 0x15f, 0x16f, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1f2, 0x0b1, 0x0ee, 0x0db, 0x1d9, 0x188, 0x0f5, 0x1a8, 0x08b, 0x028, 0x18c, 0x0c1, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1b6, 0x057, 0x0aa, 0x029, 0x0e7, 0x031, 0x101, 0x077, 0x1cb, 0x0c8, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x091, 0x192, 0x12b, 0x1f2, 0x0c4, 0x030, 0x130, 0x078, 0x16c, 0x07c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x10a, 0x007, 0x136, 0x03c, 0x08f, 0x161, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1ae, 0x0d6, 0x095, 0x02a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0aa, 0x029, 0x123, 0x147, 0x096, 0x02b, 0x099, 0x02c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1bb, 0x1f9, 0x190, 0x0c3, 0x1a5, 0x0c5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1ab, 0x13b, 0x0a6, 0x02d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x106, 0x0c9, 0x09e, 0x0e1, 0x11d, 0x1b3, 0x193, 0x0c4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x12d, 0x12e, 0x187, 0x177, 0x0a1, 0x02e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x108, 0x079, 0x08d, 0x1c6, 0x108, 0x079, 0x1a2, 0x0c6, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1f6, 0x03b, 0x0df, 0x16b, 0x16f, 0x085, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f6, 0x03b, 0x15d, 0x084, 0x1e9, 0x0cd, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0e2, 0x017, 0x161, 0x0e3, 0x1d5, 0x11f, 0x0ed, 0x128, 0x1fb, 0x0ce, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d8, 0x07a, 0x0f1, 0x190, 0x153, 0x083, 0x16a, 0x086, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1ea, 0x00e, 0x146, 0x032, 0x0d2, 0x03a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x148, 0x05c, 0x172, 0x0b0, 0x0ce, 0x0d8, 0x165, 0x19f, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1c9, 0x0f5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c5, 0x1b7, 0x0e8, 0x03c, 0x1c2, 0x0cc, 0x1f4, 0x0cf, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1b5, 0x10a, 0x15b, 0x13e, 0x0af, 0x164, 0x0b2, 0x038, 0x13e, 0x080, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1ee, 0x0d7, 0x094, 0x032, 0x10c, 0x07d, 0x1b8, 0x0cb, 0x1f3, 0x0d3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x199, 0x0fa, 0x1e7, 0x172, 0x097, 0x033, 0x0a1, 0x036, 0x133, 0x07f, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x154, 0x09a, 0x179, 0x19d, 0x09a, 0x034, 0x0ac, 0x037, 0x125, 0x07e, 0x1ab, 0x0ca, 0x1cd, 0x0d0, 0x1e0, 0x0d2, \n"
  "  0x1a6, 0x039, 0x1c5, 0x103, 0x10f, 0x167, 0x0cb, 0x03d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x11a, 0x0b6, 0x1d6, 0x0d1, 0x08d, 0x035, 0x0a6, 0x039, 0x129, 0x082, 0x1d6, 0x0d1, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0aa, 0x02d, 0x116, 0x055, 0x1ad, 0x12d, 0x183, 0x148, 0x151, 0x087, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x195, 0x1bf, 0x14b, 0x1f0, 0x122, 0x081, 0x188, 0x0c9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1ae, 0x040, 0x0f5, 0x109, 0x1d3, 0x12f, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1de, 0x0dc, 0x12d, 0x1aa, 0x0ae, 0x040, 0x1bb, 0x0d5, 0x1de, 0x0dc, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x15a, 0x02f, 0x12b, 0x14f, 0x0b3, 0x041, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d2, 0x0ba, 0x1a1, 0x18a, 0x0b8, 0x042, 0x132, 0x088, 0x175, 0x08f, 0x1ec, 0x0dd, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ad, 0x113, 0x177, 0x160, 0x1cf, 0x166, 0x19a, 0x0d4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x104, 0x07d, 0x0e4, 0x080, 0x189, 0x182, 0x1d5, 0x1a4, 0x093, 0x03e, 0x09c, 0x03f, 0x16b, 0x090, 0x1b6, 0x0d7, \n"
  "  0x1e6, 0x050, 0x185, 0x11c, 0x16d, 0x12c, 0x0eb, 0x046, 0x143, 0x08e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x111, 0x191, 0x0b5, 0x043, 0x1aa, 0x0d6, 0x1f3, 0x0de, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x14e, 0x03f, 0x0cd, 0x10d, 0x18b, 0x136, 0x155, 0x091, 0x196, 0x0d8, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x099, 0x044, 0x1c8, 0x0df, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0db, 0x048, 0x10d, 0x089, 0x126, 0x08b, 0x1ba, 0x0db, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1b4, 0x09c, 0x10a, 0x0c1, 0x193, 0x1e6, 0x0d5, 0x047, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0de, 0x049, 0x0de, 0x049, 0x113, 0x08a, 0x12a, 0x08d, 0x19d, 0x0da, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x18e, 0x0d9, 0x1a5, 0x1a0, 0x0ab, 0x1d7, 0x1db, 0x1dc, 0x14d, 0x092, 0x18e, 0x0d9, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x086, 0x04d, 0x089, 0x045, 0x121, 0x08c, 0x1ca, 0x0e1, 0x1d7, 0x0e2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0a0, 0x06d, 0x0cc, 0x0a7, 0x12c, 0x0a9, 0x152, 0x093, 0x1c1, 0x0e0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x17a, 0x012, 0x0bb, 0x13f, 0x157, 0x15b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f8, 0x052, 0x139, 0x094, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x159, 0x0f9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x12c, 0x0a2, 0x0a5, 0x1b5, 0x123, 0x1dd, 0x0db, 0x1f5, 0x0b2, 0x04a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x133, 0x135, 0x0ef, 0x16a, 0x0b5, 0x04b, 0x12d, 0x095, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ac, 0x08b, 0x0dd, 0x1b1, 0x0f3, 0x054, 0x154, 0x09a, 0x16e, 0x09c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ca, 0x02b, 0x0a6, 0x04f, 0x16b, 0x151, 0x0e1, 0x053, 0x145, 0x099, 0x176, 0x09d, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ab, 0x1f1, 0x0d0, 0x051, 0x135, 0x096, 0x160, 0x09b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0da, 0x011, 0x0d5, 0x107, 0x11d, 0x116, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x158, 0x060, 0x176, 0x0cf, 0x08b, 0x04c, 0x0be, 0x050, 0x12a, 0x098, 0x16d, 0x0a0, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x11a, 0x030, 0x0c9, 0x0f1, 0x175, 0x123, 0x0a6, 0x04f, 0x0f3, 0x058, 0x162, 0x09f, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f4, 0x09d, 0x0b9, 0x19c, 0x0ea, 0x057, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x14a, 0x00d, 0x093, 0x134, 0x08e, 0x04d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x098, 0x04e, 0x0c4, 0x055, 0x153, 0x09e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d6, 0x056, 0x127, 0x178, 0x0d6, 0x056, 0x109, 0x097, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x110, 0x075, 0x081, 0x18e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x13e, 0x0dd, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x137, 0x0a3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x124, 0x0a2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x126, 0x037, 0x10b, 0x0a1, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x118, 0x064, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x112, 0x023, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x10d, 0x1c5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x13b, 0x0a8, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x135, 0x1a3, 0x109, 0x0a4, 0x112, 0x0a5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x111, 0x0ea, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x138, 0x07c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x105, 0x0a6, 0x11e, 0x0a7, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x12c, 0x0a9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x103, 0x1e3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d7, 0x15a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0de, 0x12f, 0x1fd, 0x1cb, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d9, 0x1c7, 0x1e3, 0x1c9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f2, 0x0bb, 0x1e8, 0x1ca, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1da, 0x015, 0x0dd, 0x131, 0x1ef, 0x1cc, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1f6, 0x0d3, 0x0cb, 0x130, 0x1c5, 0x1c8, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0e9, 0x132, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c0, 0x06b, 0x0f5, 0x133, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0fa, 0x014, 0x1ce, 0x03e, 0x0f5, 0x10b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d8, 0x05f, 0x1eb, 0x1cf, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1f6, 0x054, 0x0cd, 0x127, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0db, 0x1f7, 0x0e4, 0x135, 0x1f1, 0x1d0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0cc, 0x08a, 0x1d3, 0x1ce, 0x1d3, 0x1ce, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c6, 0x134, 0x1c1, 0x1cd, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d4, 0x09e, 0x1ca, 0x0c4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1f2, 0x001, 0x1bf, 0x1d4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f8, 0x061, 0x136, 0x0cd, 0x1ee, 0x0d5, 0x1db, 0x1d8, 0x1db, 0x1d8, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d5, 0x13c, 0x0e6, 0x13f, 0x127, 0x180, 0x13a, 0x181, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1d0, 0x06f, 0x164, 0x094, 0x0bb, 0x1f8, 0x1a2, 0x1d2, 0x1b5, 0x1d3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x14e, 0x044, 0x11b, 0x142, 0x0e5, 0x140, 0x0ea, 0x141, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x198, 0x063, 0x15d, 0x1b2, 0x1b3, 0x1cf, 0x08e, 0x136, 0x0a9, 0x137, 0x0d4, 0x13e, 0x168, 0x185, 0xfff, 0xfff, \n"
  "  0x152, 0x024, 0x186, 0x04c, 0x1f7, 0x17f, 0x0b1, 0x138, 0x0c3, 0x13d, 0x145, 0x184, 0x16b, 0x186, 0x1ad, 0x1d5, \n"
  "  0x10c, 0x0a4, 0x0ec, 0x0a8, 0x171, 0x194, 0x18b, 0x1d1, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x193, 0x130, 0x12b, 0x137, 0x0ad, 0x139, 0x0df, 0x143, 0x14d, 0x187, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x1bc, 0x090, 0x0c9, 0x142, 0x10e, 0x182, 0x1d5, 0x1d9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d2, 0x01f, 0x18a, 0x028, 0x1a1, 0x0e4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x08c, 0x0a1, 0x199, 0x19b, 0x12d, 0x1c3, 0x133, 0x1e8, 0x15a, 0x188, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x096, 0x03d, 0x185, 0x102, 0x157, 0x189, 0x1ae, 0x1d7, 0x1cb, 0x1da, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x124, 0x082, 0x112, 0x0ad, 0x109, 0x183, 0x09b, 0x1da, 0x109, 0x183, 0x1de, 0x1dc, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x122, 0x01d, 0x111, 0x0f0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x143, 0x1e4, 0x0a5, 0x13a, 0x0aa, 0x13b, 0x0d1, 0x144, 0x180, 0x1d6, 0x1cd, 0x1db, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ee, 0x041, 0x16d, 0x10e, 0x176, 0x190, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x068, 0x05b, 0x1d4, 0x083, 0x05d, 0x1af, 0x0b3, 0x1c9, 0x034, 0x0e3, 0x12e, 0x18a, 0x1b8, 0x1df, 0xfff, 0xfff, \n"
  "  0x133, 0x14a, 0x052, 0x0e8, 0x0a7, 0x145, 0x1aa, 0x1de, 0x1f5, 0x1e7, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d8, 0x07b, 0x162, 0x0b7, 0x1d3, 0x1e5, 0x0e1, 0x14a, 0x129, 0x18b, 0x1a4, 0x1dd, 0x1d3, 0x1e5, 0xfff, 0xfff, \n"
  "  0x16a, 0x00f, 0x026, 0x036, 0x04f, 0x0e9, 0x075, 0x0ec, 0x0ad, 0x146, 0x1b2, 0x1e1, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x158, 0x065, 0x0e4, 0x07f, 0x0d2, 0x0ac, 0x173, 0x1d0, 0x02b, 0x0e4, 0x1b5, 0x1e2, 0x1ce, 0x1e6, 0x1e9, 0x1e8, \n"
  "  0x1c2, 0x018, 0x0f6, 0x058, 0x157, 0x17d, 0x063, 0x0eb, 0x149, 0x18f, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x032, 0x0bf, 0x165, 0x1ba, 0x04c, 0x0ea, 0x0a8, 0x147, 0x1a3, 0x1e0, 0x1f0, 0x1e9, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x13a, 0x013, 0x03d, 0x118, 0x06b, 0x138, 0x09b, 0x13d, 0x1af, 0x165, 0x057, 0x0ed, 0x1d2, 0x1eb, 0x1dd, 0x1ec, \n"
  "  0x09c, 0x08e, 0x1fe, 0x0de, 0x0ed, 0x1ab, 0x05a, 0x0ee, 0x0aa, 0x149, 0x115, 0x18c, 0x14c, 0x191, 0x179, 0x194, \n"
  "  0x036, 0x053, 0x0b1, 0x0eb, 0x059, 0x0fb, 0x167, 0x173, 0x197, 0x17b, 0x0e2, 0x14c, 0x14a, 0x192, 0x1fb, 0x1ed, \n"
  "  0x070, 0x072, 0x008, 0x077, 0x1a3, 0x1e0, 0x025, 0x0e6, 0x03b, 0x0e7, 0x112, 0x18d, 0x1c9, 0x1ea, 0xfff, 0xfff, \n"
  "  0x0ca, 0x00c, 0x10d, 0x111, 0x15b, 0x144, 0x1c7, 0x155, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x054, 0x087, 0x02c, 0x08c, 0x11e, 0x0e0, 0x013, 0x1cd, 0x049, 0x0f0, 0x086, 0x148, 0x199, 0x1e4, 0xfff, 0xfff, \n"
  "  0x02a, 0x02e, 0x001, 0x0e5, 0x1a5, 0x11e, 0x0d3, 0x14b, 0x001, 0x0e5, 0x0d3, 0x14b, 0x106, 0x18e, 0xfff, 0xfff, \n"
  "  0x120, 0x06c, 0x090, 0x074, 0x151, 0x193, 0x0c5, 0x1b9, 0x042, 0x0ef, 0x151, 0x193, 0x18c, 0x1e3, 0xfff, 0xfff, \n"
  "  0x02a, 0x009, 0x07f, 0x16e, 0x155, 0x198, 0x15a, 0x199, 0x1eb, 0x1f8, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f6, 0x0ce, 0x053, 0x1c7, 0x0ac, 0x14f, 0x13d, 0x196, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0b2, 0x020, 0x1b9, 0x0fd, 0x0db, 0x152, 0x065, 0x0fc, 0x0db, 0x152, 0x1d6, 0x1f5, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x121, 0x18b, 0x159, 0x19a, 0x1ed, 0x1c2, 0x038, 0x0f3, 0x054, 0x0f9, 0x06b, 0x0fd, 0x159, 0x19a, 0xfff, 0xfff, \n"
  "  0x0de, 0x048, 0x0b7, 0x15f, 0x12f, 0x169, 0x072, 0x100, 0x18a, 0x1ee, 0x1cd, 0x1f6, 0x1d3, 0x1f7, 0xfff, 0xfff, \n"
  "  0x1a6, 0x0ca, 0x01a, 0x0f2, 0x046, 0x0fa, 0x06d, 0x0ff, 0x09d, 0x14e, 0x105, 0x195, 0x14b, 0x19b, 0x174, 0x19d, \n"
  "  0x04a, 0x02c, 0x1e1, 0x0e7, 0x029, 0x0f8, 0x135, 0x125, 0x016, 0x0f1, 0x051, 0x0fb, 0x085, 0x14d, 0x166, 0x19c, \n"
  "  0x082, 0x0b8, 0x1d5, 0x1be, 0x113, 0x1ea, 0x0f3, 0x1ed, 0x060, 0x0fe, 0x0c9, 0x153, 0x1ea, 0x1f9, 0xfff, 0xfff, \n"
  "  0x0be, 0x046, 0x033, 0x132, 0x1b5, 0x1f4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0b9, 0x186, 0x18b, 0x1d1, 0x00d, 0x0f4, 0x016, 0x0f5, 0x118, 0x197, 0x1b2, 0x1f3, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x11b, 0x153, 0x029, 0x0f8, 0x18d, 0x1ef, 0x1a6, 0x1f1, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x09a, 0x0c8, 0x011, 0x18f, 0x022, 0x0f7, 0x0b4, 0x151, 0x1a8, 0x1f2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x00e, 0x045, 0x19f, 0x170, 0x015, 0x0f6, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x088, 0x05d, 0x12a, 0x0b3, 0x1ad, 0x1ae, 0x194, 0x1f0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x192, 0x025, 0x08b, 0x150, 0x027, 0x179, 0x08b, 0x150, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x004, 0x097, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x055, 0x106, 0x055, 0x106, 0x07e, 0x109, 0x152, 0x1a1, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d3, 0x15a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0da, 0x15c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x059, 0x198, 0x065, 0x108, 0x0d4, 0x15b, 0x170, 0x1a2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x14d, 0x110, 0x073, 0x10b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x05c, 0x091, 0x0ed, 0x1ac, 0x15b, 0x1d9, 0x066, 0x10a, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x14a, 0x02a, 0x0d1, 0x0ed, 0x175, 0x126, 0x056, 0x107, 0x0e7, 0x15d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x141, 0x18c, 0x06b, 0x1f4, 0x16c, 0x1a3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x10a, 0x006, 0x03b, 0x140, 0x04f, 0x162, 0x09d, 0x154, 0x17d, 0x1a7, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x072, 0x0ab, 0x113, 0x1c8, 0x0fc, 0x160, 0x134, 0x19f, 0x15e, 0x1a4, 0x168, 0x1a6, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x066, 0x04b, 0x071, 0x0ec, 0x115, 0x120, 0x012, 0x101, 0x02d, 0x104, 0x0eb, 0x15f, 0x17a, 0x1a8, 0xfff, 0xfff, \n"
  "  0x109, 0x195, 0x163, 0x1e2, 0x038, 0x105, 0x04a, 0x10c, 0x0a2, 0x156, 0x0b5, 0x157, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x09a, 0x016, 0x027, 0x158, 0x0d7, 0x15e, 0x0a5, 0x158, 0x0d7, 0x15e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0d9, 0x189, 0x105, 0x19e, 0x00b, 0x102, 0x016, 0x103, 0x0a8, 0x159, 0x105, 0x19e, 0x12e, 0x1a0, 0xfff, 0xfff, \n"
  "  0x049, 0x0f6, 0x147, 0x1a5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x050, 0x076, 0x00c, 0x0a6, 0x093, 0x155, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x16a, 0x00a, 0x03d, 0x117, 0x15f, 0x16c, 0x06d, 0x117, 0x0ba, 0x163, 0x0d6, 0x16b, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x154, 0x084, 0x0b4, 0x085, 0x173, 0x1cb, 0x0eb, 0x1d4, 0x05a, 0x115, 0x0dd, 0x16c, 0x12c, 0x1aa, 0xfff, 0xfff, \n"
  "  0x0a5, 0x11b, 0x077, 0x17c, 0x0f9, 0x16e, 0x151, 0x1af, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0e0, 0x068, 0x02a, 0x0c2, 0x169, 0x196, 0x031, 0x10e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x02b, 0x139, 0x0db, 0x143, 0x047, 0x154, 0x01e, 0x10d, 0x095, 0x162, 0x0a6, 0x164, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x032, 0x0af, 0x019, 0x187, 0x075, 0x1a7, 0x0c8, 0x16d, 0x10a, 0x1a9, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f2, 0x027, 0x109, 0x0f4, 0x061, 0x118, 0x08a, 0x161, 0x133, 0x1ab, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x090, 0x073, 0x134, 0x0a0, 0x08d, 0x1c4, 0x053, 0x1ec, 0x044, 0x116, 0x0a3, 0x165, 0x162, 0x1b0, 0xfff, 0xfff, \n"
  "  0x0ca, 0x008, 0x053, 0x131, 0x02e, 0x113, 0x137, 0x1ac, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0b3, 0x1cc, 0x008, 0x10f, 0x015, 0x110, 0x09e, 0x166, 0x13a, 0x1ad, 0x159, 0x1b2, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x091, 0x0e9, 0x139, 0x0ff, 0x023, 0x146, 0x14b, 0x14e, 0x0b6, 0x16a, 0x156, 0x1b1, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x110, 0x070, 0x024, 0x095, 0x01b, 0x1f6, 0x04d, 0x119, 0x0a9, 0x169, 0x0d8, 0x16f, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x106, 0x035, 0x12d, 0x114, 0x05d, 0x11a, 0x08f, 0x168, 0x05d, 0x11a, 0x08f, 0x168, 0x15a, 0x1b4, 0xfff, 0xfff, \n"
  "  0x11c, 0x092, 0x0d2, 0x0ae, 0x04e, 0x0da, 0x02d, 0x114, 0x084, 0x167, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x042, 0x01a, 0x0c5, 0x11d, 0x017, 0x112, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x155, 0x1c0, 0x001, 0x111, 0x0cb, 0x170, 0x12b, 0x1ae, 0x148, 0x1b3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0f2, 0x000, 0x135, 0x108, 0x05b, 0x13c, 0x02f, 0x11b, 0x0fd, 0x17c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x17c, 0x08f, 0x0a9, 0x180, 0x16b, 0x1d3, 0x056, 0x11f, 0x132, 0x1b6, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x039, 0x0fc, 0x0a3, 0x145, 0x0d7, 0x17a, 0x06a, 0x122, 0x0d7, 0x17a, 0x126, 0x1b5, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x020, 0x067, 0x0ec, 0x0a3, 0x155, 0x1bc, 0x073, 0x1e7, 0x155, 0x1bc, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c6, 0x033, 0x15e, 0x047, 0x167, 0x157, 0x0aa, 0x171, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x124, 0x07e, 0x045, 0x120, 0x04a, 0x121, 0x0b6, 0x172, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x121, 0x0e6, 0x06d, 0x12b, 0x037, 0x17e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x152, 0x0bc, 0x12a, 0x0c5, 0x074, 0x123, 0x0b1, 0x173, 0x0c3, 0x17b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x16e, 0x043, 0x173, 0x133, 0x0b7, 0x15d, 0x116, 0x1b7, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0c8, 0x05a, 0x019, 0x184, 0x00e, 0x11c, 0x075, 0x126, 0x092, 0x175, 0x0fb, 0x17f, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0ba, 0x031, 0x00b, 0x14d, 0x0e5, 0x17e, 0x14d, 0x1bd, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x164, 0x096, 0x014, 0x099, 0x069, 0x125, 0x08d, 0x174, 0x0d1, 0x17d, 0x131, 0x1ba, 0x15b, 0x1be, 0xfff, 0xfff, \n"
  "  0x052, 0x003, 0x0cd, 0x112, 0x12b, 0x13a, 0x01f, 0x11d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x0de, 0x0e2, 0x095, 0x1a5, 0x108, 0x1b8, 0x146, 0x1bf, 0x15d, 0x1c0, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x055, 0x124, 0x087, 0x176, 0x055, 0x124, 0x087, 0x176, 0x0a9, 0x179, 0x113, 0x1b9, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x023, 0x11e, 0x08a, 0x177, 0x0a4, 0x178, 0x12d, 0x1bb, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x036, 0x128, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x12d, 0x1c1, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x02d, 0x1c1, 0x13b, 0x1c2, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x025, 0x104, 0x11d, 0x119, 0x013, 0x127, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x00c, 0x089, 0x116, 0x0d0, 0x129, 0x1c3, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x022, 0x01c, 0x107, 0x174, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x100, 0x06a, 0x015, 0x1bd, 0x00b, 0x1ef, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x01a, 0x129, 0x10f, 0x1c4, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x02b, 0x1d5, 0x03c, 0x12c, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x132, 0x022, 0x035, 0x12b, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x10c, 0x1c5, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x11b, 0x1db, 0x026, 0x12d, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x00d, 0x12a, 0x00d, 0x12a, 0x10a, 0x1c6, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "  0x012, 0x0bd, 0x125, 0x1bb, 0x028, 0x12e, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, \n"
  "};\n"
  "\n"
  "__constant float ringpos[] = {\n"
  "  0.0f, // 0\n"
  "  0.019615538584738607f,\n"
  "  0.04006689449610006f,\n"
  "  0.061470990346485344f,\n"
  "  0.08397485283107814f,\n"
  "  0.1077677297236319f,\n"
  "  0.13310030714732857f,\n"
  "  0.16031688975662128f,\n"
  "  0.18991316352697882f,\n"
  "  0.22264990188738543f,\n"
  "  0.2598077692923693f,\n"
  "  0.3038838648618159f,\n"
  "  0.3613249509436927f, // 12\n"
  "  0.6386750490563073f, // 13\n"
  "  0.6961161351381842f,\n"
  "  0.7401922307076307f,\n"
  "  0.7773500981126146f,\n"
  "  0.8100868364730212f,\n"
  "  0.8396831102433787f,\n"
  "  0.8668996928526714f,\n"
  "  0.8922322702763681f,\n"
  "  0.9160251471689218f,\n"
  "  0.9385290096535146f,\n"
  "  0.9599331055039f,\n"
  "  0.9803844614152614f,\n"
  "  1.0f, // 25\n"
  "};\n"
  "\n"
  "//\n"
  "\n"
  "float pointLineDistance(float x0, float y0, float x1, float y1, float x2, float y2) {\n"
  "  return fabs(((x2-x1)*(y1-y0)-(x1-x0)*(y2-y1))/sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)));\n"
  "}\n"
  "\n"
  "float bicubicSub(float p0, float p1, float p2, float p3, float x) {\n"
  "  float u, v, w;\n"
  "  v = p1 - p2;\n"
  "  w = p3 - p0;\n"
  "  u = v * 3.0f + w;\n"
  "  u = u * x    + (-4.0f * v + (p0 - p1 - w));\n"
  "  u = u * x    + (p2 - p0);\n"
  "  u = u * x * 0.5f + p1;\n"
  "  return u;\n"
  "}\n"
  "\n"
  "int mirror(int x, int y, int iw, int ih) {\n"
  "  int2 xy = (int2)(x, y);\n"
  "  xy = clamp(xy, -xy, (int2)(iw, ih) * 2 - 2 - xy);\n"
  "  return xy.x + xy.y * iw;\n"
  "}\n"
  "\n"
  "float bicubic(global float *p, float x, float y, int iw, int ih) {\n"
  "  const int ix = (int)x, iy = (int)y;\n"
  "\n"
  "  return bicubicSub(bicubicSub(p[mirror(ix-1, iy-1,iw,ih)], p[mirror(ix  , iy-1,iw,ih)], p[mirror(ix+1, iy-1,iw,ih)], p[mirror(ix+2, iy-1,iw,ih)], x-ix),\n"
  "		    bicubicSub(p[mirror(ix-1, iy  ,iw,ih)], p[mirror(ix  , iy  ,iw,ih)], p[mirror(ix+1, iy  ,iw,ih)], p[mirror(ix+2, iy  ,iw,ih)], x-ix),\n"
  "		    bicubicSub(p[mirror(ix-1, iy+1,iw,ih)], p[mirror(ix  , iy+1,iw,ih)], p[mirror(ix+1, iy+1,iw,ih)], p[mirror(ix+2, iy+1,iw,ih)], x-ix),\n"
  "		    bicubicSub(p[mirror(ix-1, iy+2,iw,ih)], p[mirror(ix  , iy+2,iw,ih)], p[mirror(ix+1, iy+2,iw,ih)], p[mirror(ix+2, iy+2,iw,ih)], x-ix), y-iy);\n"
  "}\n"
  "\n"
  "float bicubici(global unsigned short *p, float x, float y, int iw, int ih) {\n"
  "  const int ix = (int)x, iy = (int)y;\n"
  "\n"
  "  return bicubicSub(bicubicSub(p[mirror(ix-1, iy-1,iw,ih)], p[mirror(ix  , iy-1,iw,ih)], p[mirror(ix+1, iy-1,iw,ih)], p[mirror(ix+2, iy-1,iw,ih)], x-ix),\n"
  "		    bicubicSub(p[mirror(ix-1, iy  ,iw,ih)], p[mirror(ix  , iy  ,iw,ih)], p[mirror(ix+1, iy  ,iw,ih)], p[mirror(ix+2, iy  ,iw,ih)], x-ix),\n"
  "		    bicubicSub(p[mirror(ix-1, iy+1,iw,ih)], p[mirror(ix  , iy+1,iw,ih)], p[mirror(ix+1, iy+1,iw,ih)], p[mirror(ix+2, iy+1,iw,ih)], x-ix),\n"
  "		    bicubicSub(p[mirror(ix-1, iy+2,iw,ih)], p[mirror(ix  , iy+2,iw,ih)], p[mirror(ix+1, iy+2,iw,ih)], p[mirror(ix+2, iy+2,iw,ih)], x-ix), y-iy);\n"
  "}\n"
  "\n"
  "int lookup(int x) {\n"
  "  if (x >= 0x20000 || x < 0) return -1;\n"
  "\n"
  "  int h = 0, c = 0, m = 37561;\n"
  "  for(int i=0;i<17;i++, m >>= 1, x >>= 1) {\n"
  "    c = (m & 1) == 0 ? (c << 1) | (x & 1) : c;\n"
  "    h = (m & 1) == 0 ? h : (h << 1) | (x & 1);\n"
  "  }\n"
  "\n"
  "  return codeMap[h*16+0] == c ? codeMap[h*16+1] :\n"
  "    (codeMap[h*16+2] == c ? codeMap[h*16+3] :\n"
  "     (codeMap[h*16+4] == c ? codeMap[h*16+5] :\n"
  "      (codeMap[h*16+6] == c ? codeMap[h*16+7] :\n"
  "       (codeMap[h*16+8] == c ? codeMap[h*16+9] :\n"
  "	(codeMap[h*16+10] == c ? codeMap[h*16+11] :\n"
  "	 (codeMap[h*16+12] == c ? codeMap[h*16+13] :\n"
  "	  (codeMap[h*16+14] == c ? codeMap[h*16+15] : -1)))))));\n"
  "\n"
  "#if 0\n"
  "  return codeMap[h*8+0] == c || codeMap[h*8+1] == c ||\n"
  "    codeMap[h*8+2] == c || codeMap[h*8+3] == c ||\n"
  "    codeMap[h*8+4] == c || codeMap[h*8+5] == c ||\n"
  "    codeMap[h*8+6] == c || codeMap[h*8+7] == c;\n"
  "#endif\n"
  "}\n"
  "\n"
  "// Cohen-Sutherland clipping algorithm\n"
  "\n"
  "#define INSIDE 0\n"
  "#define LEFT 1\n"
  "#define RIGHT 2\n"
  "#define BOTTOM 4\n"
  "#define TOP 8\n"
  "\n"
  "int computeOutCode(const float x, const float y, const float xmin, const float ymin, const float xmax, const float ymax) {\n"
  "  return (x < xmin ? LEFT : 0) | (x > xmax ? RIGHT : 0) | (y < ymin ? BOTTOM : 0) | (y > ymax ? TOP : 0);\n"
  "}\n"
  "\n"
  "float4 clipLineWithRect(float x0, float y0, float x1, float y1, const float xmin, const float ymin, const float xmax, const float ymax) {\n"
  "  int outcode0 = computeOutCode(x0, y0, xmin, ymin, xmax, ymax);\n"
  "  int outcode1 = computeOutCode(x1, y1, xmin, ymin, xmax, ymax);\n"
  "  bool accept = false;\n"
  "\n"
  "  while (true) {\n"
  "    if ((outcode0 | outcode1) == 0) {\n"
  "      accept = true;\n"
  "      break;\n"
  "    } else if ((outcode0 & outcode1) != 0) {\n"
  "      break;\n"
  "    } else {\n"
  "      float x = 0, y = 0;\n"
  "\n"
  "      int outcodeOut = outcode0 != 0 ? outcode0 : outcode1;\n"
  "\n"
  "      if ((outcodeOut & TOP) != 0) {\n"
  "	x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);\n"
  "	y = ymax;\n"
  "      } else if ((outcodeOut & BOTTOM) != 0) {\n"
  "	x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);\n"
  "	y = ymin;\n"
  "      } else if ((outcodeOut & RIGHT) != 0) {\n"
  "	y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);\n"
  "	x = xmax;\n"
  "      } else if ((outcodeOut & LEFT) != 0) {\n"
  "	y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);\n"
  "	x = xmin;\n"
  "      }\n"
  "\n"
  "      if (outcodeOut == outcode0) {\n"
  "	x0 = x;\n"
  "	y0 = y;\n"
  "	outcode0 = computeOutCode(x0, y0, xmin, ymin, xmax, ymax);\n"
  "      } else {\n"
  "	x1 = x;\n"
  "	y1 = y;\n"
  "	outcode1 = computeOutCode(x1, y1, xmin, ymin, xmax, ymax);\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "  if (accept) return (float4)(x0, y0, x1, y1);\n"
  "\n"
  "  return (float4)(xmin-1, ymin-1, xmin-1, ymin-1);\n"
  "}\n"
  "\n"
  "//\n"
  "\n"
  "__kernel void convert_lumaf_bgr(global float *out, global unsigned char *inrgb, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  out[p0] =\n"
  "    inrgb[p0*3 + 2] * (0.2126f / 255) +\n"
  "    inrgb[p0*3 + 1] * (0.7152f / 255) +\n"
  "    inrgb[p0*3 + 0] * (0.0722f / 255);\n"
  "}\n"
  "\n"
  "__kernel void edge_f_f(global float *out, global float *in, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "\n"
  "  float sum = 0, t;\n"
  "\n"
  "  t = in[mirror(x, y-1,iw,ih)] + in[mirror(x-1, y,iw,ih)] - in[mirror(x, y+1,iw,ih)] - in[mirror(x+1, y,iw,ih)];\n"
  "  sum += (in[mirror(x-1, y-1,iw,ih)] - in[mirror(x+1, y+1,iw,ih)]) * t;\n"
  "\n"
  "  t = in[mirror(x, y-1,iw,ih)] - in[mirror(x-1, y,iw,ih)] + in[mirror(x+1, y,iw,ih)] - in[mirror(x, y+1,iw,ih)];\n"
  "  sum += (in[mirror(x+1, y-1,iw,ih)] - in[mirror(x-1, y+1,iw,ih)]) * t;\n"
  "\n"
  "  out[y*iw + x] = sqrt(max(0.0f, sum));\n"
  "}\n"
  "\n"
  "__constant float v5c[] = {\n"
  "  - 4.667,-4.083, 0.000, 4.083, 4.667,\n"
  "  -10.024,-0.963, 0.000, 0.963,10.024,\n"
  "  -14.120, 3.622, 0.000,-3.622,14.120,\n"
  "  -10.024,-0.963, 0.000, 0.963,10.024,\n"
  "  - 4.667,-4.083, 0.000, 4.083, 4.667,\n"
  "};\n"
  "\n"
  "__kernel void edgeang_f_f(global float *dst, global float *in, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "  \n"
  "  float vx = 0, vy = 0;\n"
  "\n"
  "  if (x < 2 || x >= iw-2 || y < 2 || y >= ih-2) {\n"
  "    for(int yy=-2;yy<=2;yy++) {\n"
  "      for(int xx=-2;xx<=2;xx++) {\n"
  "	float s = in[mirror(x+xx, y+yy,iw,ih)];\n"
  "	vx += v5c[(xx+2)+(yy+2)*5] * s;\n"
  "	vy += v5c[(yy+2)+(xx+2)*5] * s;\n"
  "      }\n"
  "    }\n"
  "  } else {\n"
  "    for(int yy=-2;yy<=2;yy++) {\n"
  "      for(int xx=-2;xx<=2;xx++) {\n"
  "	float s = in[x+xx + (y+yy)*iw];\n"
  "	vx += v5c[(xx+2)+(yy+2)*5] * s;\n"
  "	vy += v5c[(yy+2)+(xx+2)*5] * s;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "  dst[p0] = atan2(vy, vx);\n"
  "}\n"
  "\n"
  "__kernel void labelxPreprocess_int_int(global int *label, global int *pix, global int *flags, int maxpass, int bgc, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  if (y == 0 && x < maxpass+1) {\n"
  "    flags[x] = x == 0 ? 1 : 0;\n"
  "  }\n"
  "\n"
  "  if (x >= iw || y >= ih) return;\n"
  "\n"
  "  if (pix[p0] == bgc) { label[p0] = -1; return; }\n"
  "  if (y > 0 && pix[p0] == pix[p0-iw]) { label[p0] = p0-iw; return; }\n"
  "  if (x > 0 && pix[p0] == pix[p0- 1]) { label[p0] = p0- 1; return; }\n"
  "  label[p0] = p0;\n"
  "}\n"
  "\n"
  "__kernel void label8xMain_int_int(global int *label, global int *pix, global int *flags, int pass, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  if (flags[pass-1] == 0) return;\n"
  "\n"
  "  int g = label[p0], og = g;\n"
  "\n"
  "  if (g == -1) return;\n"
  "\n"
  "  for(int yy=-1;yy<=1;yy++) {\n"
  "    for(int xx=-1;xx<=1;xx++) {\n"
  "      if (0 <= x + xx && x + xx < iw && 0 <= y + yy && y + yy < ih) {\n"
  "	const int p1 = (y + yy) * iw + x + xx, s = label[p1];\n"
  "	if (s != -1 && s < g && pix[p0] == pix[p1]) g = s;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "  for(int j=0;j<6;j++) g = label[g];\n"
  "\n"
  "  if (g != og) {\n"
  "    atomic_min(&label[og], g);\n"
  "    atomic_min(&label[p0], g);\n"
  "    flags[pass] = 1;\n"
  "  }\n"
  "}\n"
  "\n"
  "//\n"
  "\n"
  "__kernel void clear(global int *out, int size) {\n"
  "  const int x = get_global_id(0);\n"
  "  if (x >= size) return;\n"
  "\n"
  "  out[x] = 0;\n"
  "}\n"
  "\n"
  "__kernel void cast_i_f(global int *out, global float *in0, float scale, int size) {\n"
  "  const int x = get_global_id(0);\n"
  "  if (x >= size) return;\n"
  "\n"
  "  out[x] = (int)(in0[x] * scale);\n"
  "}\n"
  "\n"
  "__kernel void threshold_i_i(global int *out, global int *in, int vlow, int threshold, int vhigh, int size) {\n"
  "  const int x = get_global_id(0);\n"
  "  if (x >= size) return;\n"
  "\n"
  "  out[x] = in[x] > threshold ? vhigh : vlow;\n"
  "}\n"
  "\n"
  "//\n"
  "\n"
  "__kernel void aclassify(global int *out, global float *ang, global float *intensity, float thre, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  if (intensity[p0] < thre) {\n"
  "    out[p0] = -1;\n"
  "    return;\n"
  "  }\n"
  "\n"
  "  const int N = 6;\n"
  "\n"
  "  int a = (int)floor((ang[p0] + M_PI/N/2) * (N / M_PI)) % N;\n"
  "  if (a < 0) a += N;\n"
  "  out[p0] = a;\n"
  "}\n"
  "\n"
  "__kernel void regionSize(global int *out, global int *labelIn, int iw, int ih) {\n"
  "  const int x = get_global_id(0)*2, y = get_global_id(1)*2;\n"
  "  if (x >= (iw & ~1) || y >= (ih & ~1)) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  int l0 = labelIn[p0];\n"
  "  int l1 = labelIn[p0+1];\n"
  "  int l2 = labelIn[p0+iw];\n"
  "  int l3 = labelIn[p0+iw+1];\n"
  "\n"
  "  if (l0 == l1 && l0 ==l2 && l0 == l3) {\n"
  "    if (l0 != -1) atomic_add(&out[l0], 4);\n"
  "  } else {\n"
  "    if (l0 != -1) atomic_inc(&out[l0]);\n"
  "    if (l1 != -1) atomic_inc(&out[l1]);\n"
  "    if (l2 != -1) atomic_inc(&out[l2]);\n"
  "    if (l3 != -1) atomic_inc(&out[l3]);\n"
  "  }\n"
  "}\n"
  "\n"
  "__kernel void threRegion2(global int *inout, global int *labelIn, global int *sizeIn, int thre, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  int label = labelIn[p0];\n"
  "  inout[p0] = (label != -1 && sizeIn[label] >= thre) ? inout[p0] : 0;\n"
  "}\n"
  "\n"
  "__kernel void maxRegion(global int *out, global int *labelIn, global int *valueIn, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  if (labelIn[p0] == -1) return;\n"
  "  atomic_max(&out[labelIn[p0]], valueIn[p0]);\n"
  "}\n"
  "\n"
  "__kernel void spread(global int *inout, global int *labelIn, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  inout[p0] = labelIn[p0] == -1 ? 0 : inout[labelIn[p0]];\n"
  "}\n"
  "\n"
  "__kernel void threshold2(global int *out, global int *valueIn, int thre, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  out[p0] = valueIn[p0] < thre ? 0 : 1;\n"
  "}\n"
  "\n"
  "__kernel void detect(global int *out, global float *edge, global float *ang, global int *mask, int iw, int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  if (mask[p0] == 0) return;\n"
  "\n"
  "  int ia = (int)((ang[p0] + (M_PI + M_PI / NANGLE / 2)) * (NANGLE / M_PI)) % NANGLE;\n"
  "\n"
  "  float vx2 = cos(ia * (float)(M_PI / NANGLE));\n"
  "  float vy2 = sin(ia * (float)(M_PI / NANGLE));\n"
  "\n"
  "  float d = pointLineDistance(iw*0.5f, ih*0.5f, x, y, x+vx2, y+vy2);\n"
  "\n"
  "  if ((x-iw/2)*vy2 - (y-ih/2)*vx2 < 0) d = -d;\n"
  "\n"
  "  int s = (int)rint(d * (1.0f / SEGLEN)) + NSEGMENT/2;\n"
  "  if (s < 0 || s >= NSEGMENT) return;\n"
  "\n"
  "  atomic_inc(&out[ia*NSEGMENT + s]);\n"
  "}\n"
  "\n"
  "__kernel void stage1(global int *out, global int *hough, int outsize) {\n"
  "  const int a = get_global_id(0), s = get_global_id(1);\n"
  "  if (a >= NANGLE || s >= NSEGMENT) return;\n"
  "\n"
  "  if (hough[a*NSEGMENT + s] > THREEDGE0 &&\n"
  "      (s < 1 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 1]) &&\n"
  "      (s >= NSEGMENT-1 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 1]) &&\n"
  "      (s < 2 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 2]) &&\n"
  "      (s >= NSEGMENT-2 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 2]) &&\n"
  "      (s < 3 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 3]) &&\n"
  "      (s >= NSEGMENT-3 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 3]) &&\n"
  "      (s < 4 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 4]) &&\n"
  "      (s >= NSEGMENT-4 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 4]) &&\n"
  "      (s < 5 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 5]) &&\n"
  "      (s >= NSEGMENT-5 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 5]) &&\n"
  "      (s < 6 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 6]) &&\n"
  "      (s >= NSEGMENT-6 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 6]) &&\n"
  "      (s < 7 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s - 7]) &&\n"
  "      (s >= NSEGMENT-7 || hough[a*NSEGMENT + s] >= hough[a*NSEGMENT + s + 7])) {\n"
  "    int p = atomic_inc(&out[0]) + 1;\n"
  "    if (p*2 >= outsize) return;\n"
  "    out[p*2+0] = a;\n"
  "    out[p*2+1] = s;\n"
  "  }\n"
  "}\n"
  "\n"
  "typedef struct DETECT_t {\n"
  "  float x1, y1, x2, y2, len, ra;\n"
  "  float startPos, endPos;\n"
  "  int sum0, sum1, ptr0, ptr1;\n"
  "  int trunclen;\n"
  "  int alenp, sposp, eposp;\n"
  "} DETECT_t;\n"
  "\n"
  "__kernel void stage2(global DETECT_t *out, global int *in, global int *hough, global int *mask, global float *eangle, float diag, int outsize, int insize, int iw, int ih) {\n"
  "  const int p = get_global_id(0) + 1;\n"
  "  if (p > in[0] || p >= insize) return;\n"
  "\n"
  "  const int a = in[p*2+0], s = in[p*2+1];\n"
  "\n"
  "  //\n"
  "\n"
  "  const float ra = a * (M_PI / NANGLE);\n"
  "  const float vx = cos(ra);\n"
  "  const float vy = sin(ra);\n"
  "\n"
  "  const float x0 = iw/2 + vy * (s - NSEGMENT/2) * SEGLEN;\n"
  "  const float y0 = ih/2 - vx * (s - NSEGMENT/2) * SEGLEN;\n"
  "\n"
  "  const float4 clip = clipLineWithRect(x0 + vx * diag, y0 + vy * diag, x0 - vx * diag, y0 - vy * diag, 0, 0, iw-1, ih-1);\n"
  "\n"
  "  if (clip.s0 == clip.s2 && clip.s1 == clip.s3) return;\n"
  "\n"
  "  const float x1 = clip.s0, y1 = clip.s1, x2 = clip.s2, y2 = clip.s3, len = hypot(x2-x1, y2-y1);\n"
  "\n"
  "  int cnt = 0, sign = 1;\n"
  "  float startPos = -1, endPos = -1;\n"
  "\n"
  "  for(float d = 0;d < 1.0f;d += (1.0f/len)) {\n"
  "    int ix = (int)rint(x1 + d * (x2-x1));\n"
  "    int iy = (int)rint(y1 + d * (y2-y1));\n"
  "\n"
  "    if (ix < 0 || iy < 0 || ix >= iw || iy >= ih) continue;\n"
  "\n"
  "    int p0 = iy * iw + ix;\n"
  "\n"
  "    if (mask[p0] == 0) continue;\n"
  "\n"
  "    int sign0 = 1 & (int)floor((eangle[p0] - ra + M_PI/2) * (1.0f / M_PI));\n"
  "\n"
  "    const int N = 6;\n"
  "    bool acond = ((int)floor((eangle[p0] - ra + M_PI/N/2) * (N / M_PI)) % N) == 0;\n"
  "\n"
  "    if (acond) {\n"
  "      if (sign != sign0) cnt++;\n"
  "\n"
  "      sign = sign0;\n"
  "\n"
  "      if (startPos < 0) startPos = d;\n"
  "      endPos = d;\n"
  "    }\n"
  "  }\n"
  "\n"
  "  if (cnt > CNTTHRE) {\n"
  "    int p = atomic_inc(&((global int *)out)[0]) + 1;\n"
  "    if (p >= DETECTSIZE || (p+1)*(sizeof(DETECT_t)/4) >= outsize) return;\n"
  "\n"
  "    out[p].startPos = max(0.0f, startPos - 0.05f);\n"
  "    out[p].endPos = min(1.0f, endPos + 0.05f);\n"
  "    out[p].ra = ra;\n"
  "    out[p].x1 = x1 + out[p].startPos * (x2-x1);\n"
  "    out[p].y1 = y1 + out[p].startPos * (y2-y1);\n"
  "    out[p].x2 = x1 + out[p].endPos * (x2-x1);\n"
  "    out[p].y2 = y1 + out[p].endPos * (y2-y1);\n"
  "    out[p].len = hypot(out[p].x2-out[p].x1, out[p].y2-out[p].y1);\n"
  "\n"
  "    out[p].trunclen = (int)(out[p].len + 4);\n"
  "    out[p].ptr0 = out[p].ptr1 = p;\n"
  "    out[p].sum0 = out[p].sum1 = out[p].trunclen;\n"
  "  }\n"
  "}\n"
  "\n"
  "__kernel void stage3even(global DETECT_t *inout, int flag) {\n"
  "  const int p = get_global_id(0) + 1;\n"
  "  if (p >= DETECTSIZE || p > ((global int *)inout)[0]) return;\n"
  "\n"
  "  if (inout[p].ptr1 > 1) {\n"
  "    inout[p].sum0 = inout[p].sum1 + inout[inout[p].ptr1-1].sum1;\n"
  "    inout[p].ptr0 = inout[inout[p].ptr1-1].ptr1;\n"
  "  } else {\n"
  "    inout[p].sum0 = inout[p].sum1;\n"
  "    inout[p].ptr0 = inout[p].ptr1;\n"
  "  }\n"
  "}\n"
  "\n"
  "__kernel void stage3odd(global DETECT_t *inout) {\n"
  "  const int p = get_global_id(0) + 1;\n"
  "  if (p >= DETECTSIZE || p > ((global int *)inout)[0]) return;\n"
  "\n"
  "  if (inout[p].ptr0 > 1) {\n"
  "    inout[p].sum1 = inout[p].sum0 + inout[inout[p].ptr0-1].sum0;\n"
  "    inout[p].ptr1 = inout[inout[p].ptr0-1].ptr0;\n"
  "  } else {\n"
  "    inout[p].sum1 = inout[p].sum0;\n"
  "    inout[p].ptr1 = inout[p].ptr0;\n"
  "  }\n"
  "}\n"
  "\n"
  "__kernel void maskluma2(global unsigned short *out, global float *luma, global int *mask, const int iw, const int ih) {\n"
  "  const int x = get_global_id(0), y = get_global_id(1);\n"
  "  if (x >= iw || y >= ih) return;\n"
  "  const int p0 = y * iw + x;\n"
  "\n"
  "  out[p0] = (clamp((int)(luma[p0] * 32768), 0, 32767) << 1) | (mask[p0] != 0 ? 1 : 0);\n"
  "}\n"
  "\n"
  "__kernel void oversample2(global float *samples, global DETECT_t *in, global unsigned short *iluma, const int iw, const int ih, const int bufsize) {\n"
  "  const int p = get_global_id(0) + 1;\n"
  "  if (p >= DETECTSIZE || p > ((global int *)in)[0]) return;\n"
  "\n"
  "  const float x1 = in[p].x1, y1 = in[p].y1, x2 = in[p].x2, y2 = in[p].y2, len = in[p].len;\n"
  "  const int tlen = in[p].trunclen, spos = (in[p].sum0 - tlen) * OS;\n"
  "\n"
  "  for(int i=0;i<tlen*OS;i++) {\n"
  "    const float px = (x2 - x1) * (1.0f / (len * OS)) * i + x1;\n"
  "    const float py = (y2 - y1) * (1.0f / (len * OS)) * i + y1;\n"
  "\n"
  "    if (spos + i >= bufsize) break;\n"
  "\n"
  "    int p0 = clamp(convert_int_rte(px), 0, iw-1) + clamp(convert_int_rte(py), 0, ih-1) * iw;\n"
  "\n"
  "    if ((iluma[p0] & 1) == 0) {\n"
  "      samples[spos + i] = iluma[p0] * (1.0f / 65536.0f);\n"
  "      continue;\n"
  "    }\n"
  "\n"
  "    samples[spos + i] = bicubici(iluma, px, py, iw, ih) * (1.0f / 65536.0f);\n"
  "  }\n"
  "}\n"
  "\n"
  "__kernel void decode0(global int *out, global int *sposepos, global int *alen0, global float *samples, global DETECT_t *in, float fc, int doInit, const int sposeposSize, const int samplesSize) {\n"
  "  const int p = get_global_id(0) + 1;\n"
  "  if (p >= DETECTSIZE || p > ((global int *)in)[0]) return;\n"
  "\n"
  "  if (p == 1 && doInit) { out[0] = 0; out[1] = ((global int *)in)[0]; }\n"
  "\n"
  "  // dccut\n"
  "\n"
  "  float len = in[p].len;\n"
  "  int pos = (in[p].sum0 - in[p].trunclen) * OS;\n"
  "  global float *sfiltered = (global float *)&(alen0[pos]);\n"
  "\n"
  "#define POSMAX 32\n"
  "#define TRIG 0.001f\n"
  "\n"
  "  if (pos + len*OS + 1 >= samplesSize || POSMAX*2*(p+1) > sposeposSize) return;\n"
  "\n"
  "  float q = samples[pos + (int)(len*OS+1)], r = 0;\n"
  "\n"
  "  for(int i=1;i<=len*OS+1;i++) {\n"
  "    float s = samples[pos + (int)(len*OS+1-i)];\n"
  "    sfiltered[(int)(len*OS+1-i)] = r = s - q + fc * r;\n"
  "    q = s;\n"
  "  }\n"
  "\n"
  "  global int *alen = &alen0[pos];\n"
  "  bool mode = true;\n"
  "  int alenp = 1;\n"
  "\n"
  "  float lastsf = sfiltered[0];\n"
  "  q = samples[pos]; r = 0;\n"
  "  alen[0] = 0;\n"
  "\n"
  "  for(int i=1;i<len*OS+1;i++) {\n"
  "    float s = samples[pos + i];\n"
  "    float sf = sfiltered[i] + (r = s - q + fc * r);\n"
  "    q = s;\n"
  "\n"
  "    if (mode) {\n"
  "      if (sf < -TRIG && lastsf < -TRIG) {\n"
  "	alen[alenp++] = i-1;\n"
  "	mode = false;\n"
  "      }\n"
  "    } else {\n"
  "      if (sf > TRIG && lastsf > TRIG) {\n"
  "	alen[alenp++] = i-1;\n"
  "	mode = true;\n"
  "      }\n"
  "    }\n"
  "\n"
  "    lastsf = sf;\n"
  "  }\n"
  "\n"
  "#define ALENTHRE 14\n"
  "\n"
  "  alen[alenp++] = (int)len*OS;\n"
  "  in[p].alenp = alenp;\n"
  "\n"
  "  if (alenp <= ALENTHRE) {\n"
  "    in[p].sposp = in[p].eposp = 0;\n"
  "    return;\n"
  "  }\n"
  "\n"
  "  // spos, epos\n"
  "\n"
  "#define ERRMAX 0.8\n"
  "\n"
  "  global int *sposa = &sposepos[POSMAX*2*p], *eposa = &sposepos[POSMAX*2*p+POSMAX];\n"
  "  int sposp = 0, eposp = 0;\n"
  "\n"
  "  for(int i=0;i<alenp-2;i++) {\n"
  "    if (i >= 2 && (i & 1) == 0) {\n"
  "      float w0 = alen[i] - alen[i-1], w1 = alen[i+1] - alen[i], w2 = alen[i+2] - alen[i+1];\n"
  "      float w = (w0 + w1 + w2) * (1.0f / 3), wmin = (1 - ERRMAX) * w, wmax = (1 + ERRMAX) * w;\n"
  "      if (wmin <= w0 && w0 <= wmax && wmin <= w1 && w1 <= wmax && wmin <= w2 && w2 <= wmax) {\n"
  "	if (alen[i-1]-alen[i-2] > w * 2) {\n"
  "	  if (sposp < POSMAX) sposa[sposp++] = i-1;\n"
  "	}\n"
  "	if (alen[i+3]-alen[i+2] > w * 2) {\n"
  "	  if (eposp < POSMAX) eposa[eposp++] = i+1;\n"
  "	}\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "  in[p].sposp = sposp;\n"
  "  in[p].eposp = eposp;\n"
  "}\n"
  "\n"
  "typedef struct DECODE_t {\n"
  "  float x1, y1, x2, y2;\n"
  "  int cw, pad0, pad1, pad2;\n"
  "} DECODE_t;\n"
  "\n"
  "#define RINGPOS_LEN 26\n"
  "\n"
  "__kernel void decode1(global DECODE_t *out, global int *sposepos, global int *alen0, global DETECT_t *in, const int outsize) {\n"
  "  const int p = get_global_id(0) + 1;\n"
  "  if (p >= DETECTSIZE || p > ((global int *)in)[0]) return;\n"
  "\n"
  "  int pos = (in[p].sum0 - in[p].trunclen) * OS;\n"
  "  global int *alen = &alen0[pos];\n"
  "\n"
  "  global int *sposa = &sposepos[POSMAX*2*p], *eposa = &sposepos[POSMAX*2*p+POSMAX];\n"
  "\n"
  "  int sposp = in[p].sposp, eposp = in[p].eposp;\n"
  "\n"
  "  for(int si = 0;si < sposp;si++) {\n"
  "    for(int ei = 0;ei < eposp;ei++) {\n"
  "      const int spos = sposa[si], epos = eposa[ei];\n"
  "\n"
  "      if (spos + 6 >= epos) continue;\n"
  "\n"
  "      const float ws = (alen[spos+3] - alen[spos+0]) * (1.0f / 3);\n"
  "      const float we = (alen[epos+1] - alen[epos-2]) * (1.0f / 3);\n"
  "      const float diameter0 = (float)(alen[epos+1] - alen[spos]);\n"
  "\n"
  "      if (ws < diameter0 * 0.01 || we < diameter0 * 0.01 || we > diameter0 * 0.04 || we > diameter0 * 0.04) continue;\n"
  "\n"
  "      const float offsets = ((alen[spos+1] - alen[spos]) - diameter0 * ringpos[ 1] +\n"
  "			     (alen[spos+2] - alen[spos]) - diameter0 * ringpos[ 2] +\n"
  "			     (alen[spos+3] - alen[spos]) - diameter0 * ringpos[ 3]) * (1.0f / 4);\n"
  "\n"
  "      const float offsete = ((alen[epos-0] - alen[spos]) - diameter0 * ringpos[24] +\n"
  "			     (alen[epos-1] - alen[spos]) - diameter0 * ringpos[23] +\n"
  "			     (alen[epos-2] - alen[spos]) - diameter0 * ringpos[22]) * (1.0f / 4);\n"
  "\n"
  "      const float rim0 = alen[spos  ] + offsets, rim1 = alen[epos+1] + offsete, diameter = rim1 - rim0;\n"
  "\n"
  "      //\n"
  "\n"
  "      int cw = 0;\n"
  "      int bitpos = 0;\n"
  "      bool bit = false;\n"
  "\n"
  "      for(int i=spos;i<=epos+1 && bitpos <= 12;i++) {\n"
  "	float ep = (alen[i] - rim0) * (1.0f / diameter);\n"
  "	int bb = bitpos;\n"
  "	while(bb < RINGPOS_LEN-1 && fabs(ep - ringpos[bb]) > fabs(ep - ringpos[bb+1])) bb++;\n"
  "\n"
  "	if (bit) {\n"
  "	  for(;bitpos < bb;bitpos++) cw |= (1 << bitpos);\n"
  "	}\n"
  "	bitpos = bb;\n"
  "\n"
  "	bit = !bit;\n"
  "      }\n"
  "\n"
  "      bitpos = 0;\n"
  "      bit = false;\n"
  "\n"
  "      for(int i=epos+1;i>=spos && bitpos < 12;i--) {\n"
  "	float ep = (rim1 - alen[i]) * (1.0f / diameter);\n"
  "	int bb = bitpos;\n"
  "	while(bb < RINGPOS_LEN-1 && fabs(ep - ringpos[bb]) > fabs(ep - ringpos[bb+1])) bb++;\n"
  "\n"
  "	if (bit) {\n"
  "	  for(;bitpos < bb;bitpos++) cw |= (1 << (24 - bitpos));\n"
  "	}\n"
  "	bitpos = bb;\n"
  "\n"
  "	bit = !bit;\n"
  "      }\n"
  "\n"
  "      //\n"
  "\n"
  "      if ((cw & (0xf | (0xf << (2+19)))) == (0x5 | (0x5 << (3+19)))) {\n"
  "	cw = (cw >> 4) & ((1 << 17)-1);\n"
  "\n"
  "	int d = lookup(cw);\n"
  "	if (d != -1) {\n"
  "	    int q = atomic_inc(&((global int *)out)[0]) + 1;\n"
  "	    if ((q+1)*(sizeof(DECODE_t)/4) >= outsize) return;\n"
  "\n"
  "	    out[q].x1 = in[p].x1 + (in[p].x2-in[p].x1)*alen[spos  ]/(in[p].len*OS);\n"
  "	    out[q].y1 = in[p].y1 + (in[p].y2-in[p].y1)*alen[spos  ]/(in[p].len*OS);\n"
  "	    out[q].x2 = in[p].x1 + (in[p].x2-in[p].x1)*alen[epos+1]/(in[p].len*OS);\n"
  "	    out[q].y2 = in[p].y1 + (in[p].y2-in[p].y1)*alen[epos+1]/(in[p].len*OS);\n"
  "	    out[q].cw = d;\n"
  "	}\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
;
